/**
 * Form state handling made easy
 * @version v0.1.1 - 2015-05-23
 * @link https://github.com/platanus/angular-form-utils
 * @author Ignacio Baixas <ignacio@platan.us>
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
!function(a,b){"use strict";a.module("platanus.formutils",[]),a.module("platanus.formutils").directive("bsControlGroup",["$compile",function(c){return{restrict:"AE",controller:["$scope",function(b){a.extend(this,{setLabel:function(a){b.label=a},setHelp:function(a){b.help=a},setError:function(a){b.error=a}})}],template:'<div class="control-group" input-aware ng-class="{ \'error\': !!error }">          <label class="control-label" for="{{for}}"></label>          <div class="controls">            <div style="display: inline-block" ng-transclude></div>            <span class="help-inline"></span>          </div>        </div>',replace:!0,transclude:!0,scope:{},link:function(a,d,e){function f(b){j.html(b),c(j.contents())(a.$parent)}function g(b,d){k.attr("class","help-inline"+(d?" "+d:"")),k.html(b),c(k.contents())(a.$parent)}function h(){return a.$input.dirty&&a.$input.errors.length>0}function i(){h()?g(a.$input.errors[0].tag,"ks-error"):g(a.help||"")}var j=d.find("label.control-label"),k=d.find(".controls .help-inline");a.$watch("label",f),a.$watch("help",i),a.$watch("$input.errors",i),e.$observe("label",function(c){c!==b&&(a.label=c)}),e.$observe("help",function(c){c!==b&&(a.help=c)})}}}]).directive("bsCgLabel",[function(){return{restrict:"AE",require:"^bsControlGroup",compile:function(a){var b=a.html();return{pre:function(a,c,d,e){c.remove(),e.setLabel(b)}}}}}]).directive("bsCgHelp",[function(){return{restrict:"AE",require:"^bsControlGroup",compile:function(a){var b=a.html();return{pre:function(a,c,d,e){c.remove(),e.setHelp(b)}}}}}]),a.module("platanus.formutils").directive("dirtyOnBlur",["FormUtils",function(a){return{restrict:"AC",require:"ngModel",link:function(b,c,d,e){c.on("blur",function(){b.$apply(function(){e.$pristine&&a.forceModelDirty(e)})})}}}]),a.module("platanus.formutils").directive("formFor",[function(){return{restrict:"A",scope:{model:"=formFor"},controller:["$scope",function(a){this.getModel=function(){return a.model}}]}}]),a.module("platanus.formutils").directive("inputAware",[function(){return{restrict:"A",require:"?^^inputAware",link:function(a,b,c,d){a.$input={dirty:!1,errors:[]},a.$$inputAwareParent=d},controller:["$scope",function(b){function c(){for(var a,c,e=0,f=!1,g=[];a=d[e++];)for(a.dirty&&(f=!0),c=0;c<a.errors.length;c++)g.push({name:a.name,tag:a.errors[c]});b.$input.dirty=f,b.$input.errors=g}var d=[];a.extend(this,{registerInput:function(a){var e={name:a,dirty:!1,errors:[]},f=b.$$inputAwareParent?b.$$inputAwareParent.registerInput(a):null;return d.push(e),{setDirty:function(a){f&&f.setDirty(a),e.dirty=a,c()},setErrors:function(a){f&&f.setErrors(a),e.errors=a,c()},unregister:function(){f&&f.unregister();for(var a=0,b=d.length;b>a;a++)if(d[a]===e){d.splice(a,1);break}}}}})}]}}]),a.module("platanus.formutils").directive("inputAwareInput",["InputAwareHelper",function(a){return{restrict:"E",require:["?ngModel","^inputAware"],link:function(b,c,d,e){if(e[1]){var f=null;if(e[0])f=e[0];else{var g=c.find("[ng-model]");f=g.controller("ngModel")}a.link(b,d.inputAwareInput||d.name,f,e[1])}}}}]),a.forEach(["input","select","textarea"],function(b){a.module("platanus.formutils").directive(b,["InputAwareHelper",function(a){return{restrict:"E",require:["?ngModel","?^inputAware"],link:function(b,c,d,e){e[0]&&e[1]&&a.link(b,d.name,e[0],e[1])}}}])}),a.module("platanus.formutils").directive("inputFor",["$compile",function(b){return{restrict:"A",scope:{model:"="},priority:1e3,terminal:!0,require:"?^formFor",compile:function(c,d){return c.attr("name",d.inputFor||d.name),c.attr("ng-model","modelAdaptor"),c.attr("ng-model-options","{ getterSetter: true }"),c.removeAttr("input-for"),{pre:a.noop,post:function(a,c,d,e){function f(){if(a.model)return a.model;if(e)return e.getModel();throw"Missing model declaration at form or input"}a.modelAdaptor=function(a){return"undefined"==typeof a?f()[d.inputFor||d.name]:void(f()[d.inputFor||d.name]=a)},b(c)(a)}}}}}]),a.module("platanus.formutils").directive("submitValid",["$parse","FormUtils",function(a,b){return{require:"form",link:function(c,d,e,f){var g=a(e.submitValid),h=e.submitInvalid&&a(e.submitInvalid);d.on("submit",function(a){c.$apply(function(){b.processForm(f,function(){g(c)},h?function(){return h(c)}:null,a)})})}}}]),function(){function b(a){var b=[];for(var c in a)a.hasOwnProperty(c)&&a[c]&&b.push(c);return b}a.module("platanus.formutils").constant("InputAwareHelper",{link:function(a,c,d,e){var f=e.registerInput(c);a.$watch(function(){return d.$dirty},function(a){f.setDirty(a)}),a.$watch(function(){return d.$invalid?b(d.$error).join(","):null},function(a){a=a?a.split(","):[],f.setErrors(a)}),a.$on("$destroy",function(){f.unregister()})}})}(),a.module("platanus.formutils").factory("FormUtils",["FormUtilsConfig",function(b){var c={forceModelDirty:function(a){a.$setDirty?a.$setDirty(!0):a.$setViewValue(a.$viewValue)},forceFormDirty:function(b){a.forEach(b,function(a){a&&a.$pristine&&c.forceModelDirty(a)})},processForm:function(a,d,e,f){c.forceFormDirty(a),e=e||b.invalidHandler,(a.$valid||e&&e(a,f)!==!1)&&d(a,f)},setModelAsUser:function(a,b){a.$setViewValue(b),a.$setDirty&&a.$setDirty(!0),a.$render()},fillFormAsUser:function(b,d){a.forEach(d,function(a,d){var e=b[d];e&&e.$setViewValue&&c.setModelAsUser(e,a)})}};return c}]).provider("FormUtilsConfig",[function(){var a={};return{$get:["$injector",function(b){if(a.invalidHandler){var c=a.invalidHandler;a.invalidHandler=function(a,d){return b.invoke(c,null,{$form:a,$event:d})}}return a}],setInvalidHandler:function(b){a.invalidHandler=b}}}])}(angular);